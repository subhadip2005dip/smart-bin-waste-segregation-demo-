<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SmartBin Pro - Advanced Filtration System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #0b0f19 0%, #1a1f2e 100%);
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #34d399 0%, #60a5fa 100%);
            border-radius: 8px;
        }
        
        .logo-text {
            font-weight: 700;
            font-size: 1.5rem;
        }
        
        .nav-buttons {
            display: flex;
            gap: 15px;
        }
        
        .btn {
            padding: 10px 20px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-outline {
            background: transparent;
            color: #fff;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-primary {
            background: #fff;
            color: #0b0f19;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .hero {
            text-align: center;
            padding: 60px 0;
        }
        
        h1 {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 20px;
            background: linear-gradient(to right, #fff, #c2d3ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #c2d3ff;
            max-width: 600px;
            margin: 0 auto 40px;
            line-height: 1.6;
        }
        
        .canvas-container {
            width: 100%;
            height: 500px;
            margin: 40px 0;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
        }
        
        #bin-canvas {
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        }
        
        .view-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .view-btn {
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
        }
        
        .view-btn.active {
            background: rgba(96, 165, 250, 0.3);
            border-color: #60a5fa;
        }
        
        .scan-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }
        
        .scan-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .scan-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-3px);
        }
        
        .prediction-display {
            display: inline-block;
            padding: 12px 24px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            margin-top: 20px;
        }
        
        .filtration-system {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin: 60px 0;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .filtration-info {
            padding: 20px;
        }
        
        .filtration-title {
            font-size: 1.8rem;
            margin-bottom: 20px;
            color: #34d399;
        }
        
        .filtration-steps {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .step {
            display: flex;
            gap: 15px;
            align-items: flex-start;
        }
        
        .step-number {
            background: rgba(96, 165, 250, 0.2);
            color: #60a5fa;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            font-weight: bold;
        }
        
        .step-content {
            color: #c2d3ff;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin: 80px 0;
        }
        
        .feature-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 25px;
            transition: all 0.3s ease;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .feature-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }
        
        .feature-title {
            font-size: 1.3rem;
            margin-bottom: 15px;
            color: #60a5fa;
        }
        
        .feature-text {
            color: #c2d3ff;
            line-height: 1.6;
        }
        
        .specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 80px 0;
        }
        
        .spec-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 25px;
            text-align: center;
        }
        
        .spec-value {
            font-size: 2rem;
            font-weight: 700;
            margin: 10px 0;
            color: #34d399;
        }
        
        .spec-label {
            color: #c2d3ff;
        }
        
        footer {
            text-align: center;
            padding: 40px 0;
            margin-top: 60px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .sensor-animation {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 200px;
            height: 4px;
            background: linear-gradient(90deg, transparent, #34d399, transparent);
            transform: translate(-50%, -50%);
            border-radius: 2px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .sensor-active {
            opacity: 1;
            animation: scan 2s ease-in-out;
        }
        
        @keyframes scan {
            0% {
                width: 0;
                opacity: 0.5;
            }
            50% {
                width: 200px;
                opacity: 1;
            }
            100% {
                width: 0;
                opacity: 0.5;
            }
        }
        
        .internal-part {
            transition: all 0.5s ease;
        }
        
        .internal-visible {
            opacity: 1;
        }
        
        .internal-hidden {
            opacity: 0.3;
        }
        
        @media (max-width: 968px) {
            .filtration-system {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .canvas-container {
                height: 400px;
            }
            
            .scan-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .scan-btn {
                width: 100%;
                max-width: 300px;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-icon"></div>
                <div class="logo-text">SmartBin Pro</div>
            </div>
            <div class="nav-buttons">
                <button class="btn btn-outline">Live Demo</button>
                <button class="btn btn-primary">Pre-order</button>
            </div>
        </header>
        
        <section class="hero">
            <h1>Advanced Waste Filtration</h1>
            <p class="subtitle">SmartBin Pro now features multi-stage filtration and preprocessing for optimal waste management.</p>
            
            <div class="view-controls">
                <button class="view-btn active" id="external-view">External View</button>
                <button class="view-btn" id="internal-view">Filtration View</button>
            </div>
            
            <div class="canvas-container">
                <div id="bin-canvas"></div>
                <div class="sensor-animation" id="sensor"></div>
            </div>
            
            <div class="scan-controls">
                <div class="scan-btn" onclick="startScan('bottle', 0)">
                    <span>🔍</span> Scan Plastic Bottle
                </div>
                <div class="scan-btn" onclick="startScan('banana', 1)">
                    <span>🔍</span> Scan Banana Peel
                </div>
                <div class="scan-btn" onclick="startScan('can', 2)">
                    <span>🔍</span> Scan Aluminum Can
                </div>
                <div class="scan-btn" onclick="startScan('unknown', 3)">
                    <span>🔍</span> Scan Unknown Item
                </div>
            </div>
            
            <div class="prediction-display">
                <span>Prediction: </span>
                <span id="prediction">Recyclables</span>
            </div>
        </section>
        
        <section class="filtration-system">
            <div class="filtration-info">
                <h2 class="filtration-title">Advanced Filtration System</h2>
                <div class="filtration-steps">
                    <div class="step">
                        <div class="step-number">1</div>
                        <div class="step-content">Multi-spectral scanning identifies material composition and detects contaminants.</div>
                    </div>
                    <div class="step">
                        <div class="step-number">2</div>
                        <div class="step-content">Air filtration system captures micro-particles and neutralizes odors.</div>
                    </div>
                    <div class="step">
                        <div class="step-number">3</div>
                        <div class="step-content">UV-C sanitation eliminates 99.9% of bacteria and viruses on contact.</div>
                    </div>
                    <div class="step">
                        <div class="step-number">4</div>
                        <div class="step-content">Moisture separation extracts liquids from solid waste for proper disposal.</div>
                    </div>
                    <div class="step">
                        <div class="step-number">5</div>
                        <div class="step-content">Smart compaction optimizes space utilization in each chamber.</div>
                    </div>
                </div>
            </div>
            <div class="filtration-visual">
                <img src="https://i.imgur.com/5q7K6Yl.png" alt="SmartBin Filtration System" style="width: 100%; border-radius: 12px;">
            </div>
        </section>
        
        <section class="features">
            <div class="feature-card">
                <div class="feature-icon" style="background: rgba(96, 165, 250, 0.2); color: #60a5fa;">📷</div>
                <h3 class="feature-title">Multi-Spectral Scanning</h3>
                <p class="feature-text">Advanced sensors analyze material composition using visible, IR, and UV spectra for precise identification.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon" style="background: rgba(52, 211, 153, 0.2); color: #34d399;">💨</div>
                <h3 class="feature-title">Air Filtration</h3>
                <p class="feature-text">HEPA and activated carbon filters capture micro-particles and neutralize odors before air is released.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon" style="background: rgba(168, 85, 247, 0.2); color: #a855f7;">🦠</div>
                <h3 class="feature-title">UV-C Sanitation</h3>
                <p class="feature-text">Germicidal UV-C lights eliminate pathogens on waste surfaces and within the bin chamber.</p>
            </div>
        </section>
        
        <section class="specs">
            <div class="spec-card">
                <div class="spec-label">Filtration Efficiency</div>
                <div class="spec-value">99.97%</div>
            </div>
            <div class="spec-card">
                <div class="spec-label">UV-C Power</div>
                <div class="spec-value">36W</div>
            </div>
            <div class="spec-card">
                <div class="spec-label">Air Changes</div>
                <div class="spec-value">10x/hr</div>
            </div>
            <div class="spec-card">
                <div class="spec-label">Noise Level</div>
                <div class="spec-value">< 45dB</div>
            </div>
        </section>
        
        <footer>
            <p>Designed by SmartBin Team • Prototype UI built with Three.js</p>
            <div style="margin-top: 20px;">
                <button class="btn btn-outline">Download Concept</button>
                <button class="btn btn-primary">Contact Us</button>
            </div>
        </footer>
    </div>

    <script>
        // Three.js implementation for the SmartBin with filtration system
        let scene, camera, renderer, controls;
        let bin, lid, items = [];
        let targetBin = 0;
        let animationInProgress = false;
        let showInternalView = false;
        let internalParts = [];
        let conveyorBelts = [];
        let flaps = [];
        let filters = [];
        let uvLights = [];
        
        // Initialize Three.js scene
        function init() {
            // Create scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x0f172a);
            
            // Create camera
            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 1.2, 4.2);
            
            // Create renderer
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(document.getElementById('bin-canvas').clientWidth, document.getElementById('bin-canvas').clientHeight);
            renderer.shadowMap.enabled = true;
            document.getElementById('bin-canvas').appendChild(renderer.domElement);
            
            // Add orbit controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 3;
            controls.maxDistance = 8;
            controls.enablePan = false;
            
            // Add lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
            directionalLight.position.set(3, 5, 3);
            directionalLight.castShadow = true;
            scene.add(directionalLight);
            
            // Create the SmartBin with filtration system
            createSmartBin();
            
            // Handle window resize
            window.addEventListener('resize', onWindowResize);
            
            // Set up view toggle
            document.getElementById('external-view').addEventListener('click', () => toggleView(false));
            document.getElementById('internal-view').addEventListener('click', () => toggleView(true));
            
            // Start animation loop
            animate();
        }
        
        function onWindowResize() {
            camera.aspect = document.getElementById('bin-canvas').clientWidth / document.getElementById('bin-canvas').clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(document.getElementById('bin-canvas').clientWidth, document.getElementById('bin-canvas').clientHeight);
        }
        
        function createSmartBin() {
            bin = new THREE.Group();
            
            // Base pedestal
            const baseGeometry = new THREE.CylinderGeometry(1.6, 1.6, 0.2, 64);
            const baseMaterial = new THREE.MeshStandardMaterial({ color: 0x0b0f19, metalness: 0.6, roughness: 0.2 });
            const base = new THREE.Mesh(baseGeometry, baseMaterial);
            base.position.y = -1.1;
            bin.add(base);
            
            // Bin body - we'll make it semi-transparent for internal view
            const bodyGeometry = new THREE.BoxGeometry(2.2, 2.2, 2.2);
            const bodyMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x0f172a, 
                metalness: 0.2, 
                roughness: 0.5,
                transparent: true,
                opacity: 0.7
            });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            bin.add(body);
            
            // Create filtration system at the top
            createFiltrationSystem();
            
            // Lid
            const lidGeometry = new THREE.BoxGeometry(2.0, 0.25, 2.0);
            const lidMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x0f172a, 
                metalness: 0.2, 
                roughness: 0.5,
                transparent: true,
                opacity: 0.7
            });
            lid = new THREE.Mesh(lidGeometry, lidMaterial);
            lid.position.y = 1.2;
            bin.add(lid);
            
            // LED Ring
            const ringGeometry = new THREE.TorusGeometry(0.8, 0.04, 32, 128);
            const ringMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x60a5fa, 
                emissive: 0x60a5fa, 
                emissiveIntensity: 2,
                roughness: 0.3 
            });
            const ring = new THREE.Mesh(ringGeometry, ringMaterial);
            ring.rotation.x = Math.PI / 2;
            ring.position.y = 1.2 + 0.16;
            bin.add(ring);
            
            // Create internal mechanisms
            createInternalMechanisms();
            
            // Inner chambers
            const chamberPositions = [
                [-0.55, -0.05, 0.55],   // Recyclables (blue)
                [0.55, -0.05, 0.55],    // Organic (green)
                [-0.55, -0.05, -0.55],  // Metal/E-waste (orange)
                [0.55, -0.05, -0.55]    // Landfill (red)
            ];
            
            const chamberColors = [0x60a5fa, 0x34d399, 0xf59e0b, 0xef4444];
            
            chamberPositions.forEach((pos, i) => {
                // Chamber bin
                const chamberGeometry = new THREE.BoxGeometry(0.7, 1, 0.7);
                const chamberMaterial = new THREE.MeshStandardMaterial({ 
                    color: 0x111827,
                    metalness: 0.2, 
                    roughness: 0.7 
                });
                const chamber = new THREE.Mesh(chamberGeometry, chamberMaterial);
                chamber.position.set(pos[0], pos[1], pos[2]);
                bin.add(chamber);
                
                // Chamber rim
                const rimGeometry = new THREE.BoxGeometry(0.7 + 0.06, 0.04, 0.7 + 0.06);
                const rimMaterial = new THREE.MeshStandardMaterial({ 
                    color: chamberColors[i],
                    metalness: 0.3,
                    roughness: 0.3
                });
                const rim = new THREE.Mesh(rimGeometry, rimMaterial);
                rim.position.set(pos[0], pos[1] + 1/2 + 0.02, pos[2]);
                bin.add(rim);
            });
            
            scene.add(bin);
        }
        
        function createFiltrationSystem() {
            // Filtration chamber (top part of the bin)
            const filterChamberGeometry = new THREE.CylinderGeometry(1.8, 1.8, 0.4, 32);
            const filterChamberMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x2d3748,
                metalness: 0.4,
                roughness: 0.3
            });
            const filterChamber = new THREE.Mesh(filterChamberGeometry, filterChamberMaterial);
            filterChamber.position.y = 1.0;
            bin.add(filterChamber);
            
            // Air vents
            const ventGeometry = new THREE.BoxGeometry(0.1, 0.3, 0.05);
            const ventMaterial = new THREE.MeshStandardMaterial({ color: 0x4a5568 });
            
            for (let i = 0; i < 8; i++) {
                const angle = (i / 8) * Math.PI * 2;
                const radius = 1.7;
                
                const vent = new THREE.Mesh(ventGeometry, ventMaterial);
                vent.position.set(
                    Math.cos(angle) * radius,
                    1.0,
                    Math.sin(angle) * radius
                );
                vent.rotation.y = angle;
                bin.add(vent);
                filters.push(vent);
            }
            
            // UV lights inside filtration chamber
            const uvLightGeometry = new THREE.CylinderGeometry(0.05, 0.05, 0.2, 16);
            const uvLightMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x7e22ce,
                emissive: 0x7e22ce,
                emissiveIntensity: 0.5
            });
            
            for (let i = 0; i < 4; i++) {
                const angle = (i / 4) * Math.PI * 2;
                const radius = 0.6;
                
                const uvLight = new THREE.Mesh(uvLightGeometry, uvLightMaterial);
                uvLight.position.set(
                    Math.cos(angle) * radius,
                    1.0,
                    Math.sin(angle) * radius
                );
                uvLight.rotation.x = Math.PI / 2;
                bin.add(uvLight);
                uvLights.push(uvLight);
            }
            
            // Scanning array at the very top
            const scannerGeometry = new THREE.CylinderGeometry(0.8, 1.0, 0.15, 32);
            const scannerMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x1e40af,
                metalness: 0.8,
                roughness: 0.1
            });
            const scanner = new THREE.Mesh(scannerGeometry, scannerMaterial);
            scanner.position.y = 1.2 + 0.25;
            bin.add(scanner);
            
            // Scanning sensors
            const sensorGeometry = new THREE.SphereGeometry(0.04, 16, 16);
            const sensorMaterial = new THREE.MeshStandardMaterial({ 
                color: 0xff3333,
                emissive: 0xff0000,
                emissiveIntensity: 0.8
            });
            
            for (let i = 0; i < 12; i++) {
                const angle = (i / 12) * Math.PI * 2;
                const radius = 0.9;
                
                const sensor = new THREE.Mesh(sensorGeometry, sensorMaterial);
                sensor.position.set(
                    Math.cos(angle) * radius,
                    1.2 + 0.25,
                    Math.sin(angle) * radius
                );
                bin.add(sensor);
            }
        }
        
        function createInternalMechanisms() {
            // Create conveyor belts
            const beltGeometry = new THREE.BoxGeometry(1.2, 0.05, 0.3);
            const beltMaterial = new THREE.MeshStandardMaterial({ color: 0x444444, metalness: 0.7, roughness: 0.3 });
            
            for (let i = 0; i < 2; i++) {
                const belt = new THREE.Mesh(beltGeometry, beltMaterial);
                belt.position.set(0, 0.3, i * 0.4 - 0.2);
                belt.rotation.x = Math.PI / 8;
                bin.add(belt);
                conveyorBelts.push(belt);
                internalParts.push(belt);
            }
            
            // Create sorting flaps
            const flapGeometry = new THREE.BoxGeometry(0.4, 0.05, 0.4);
            const flapMaterial = new THREE.MeshStandardMaterial({ color: 0x888888, metalness: 0.8, roughness: 0.2 });
            
            for (let i = 0; i < 4; i++) {
                const flap = new THREE.Mesh(flapGeometry, flapMaterial);
                const angle = i * Math.PI / 2;
                const radius = 0.5;
                flap.position.set(
                    Math.cos(angle) * radius,
                    0.1,
                    Math.sin(angle) * radius
                );
                flap.rotation.y = angle;
                bin.add(flap);
                flaps.push(flap);
                internalParts.push(flap);
            }
            
            // Initially hide internal parts
            toggleInternalVisibility(false);
        }
        
        function toggleInternalVisibility(visible) {
            const opacity = visible ? 1 : 0.3;
            
            internalParts.forEach(part => {
                if (part.material) {
                    part.material.transparent = true;
                    part.material.opacity = opacity;
                }
            });
            
            // Also adjust bin body and lid opacity
            bin.children.forEach(child => {
                if (child.material && (child.material.opacity !== undefined)) {
                    child.material.opacity = visible ? 0.3 : 0.7;
                }
            });
        }
        
        function toggleView(internal) {
            showInternalView = internal;
            
            // Update button states
            document.getElementById('external-view').classList.toggle('active', !internal);
            document.getElementById('internal-view').classList.toggle('active', internal);
            
            // Adjust camera position based on view
            if (internal) {
                camera.position.set(0, 0.5, 5);
                controls.minDistance = 4;
                controls.maxDistance = 6;
            } else {
                camera.position.set(0, 1.2, 4.2);
                controls.minDistance = 3;
                controls.maxDistance = 8;
            }
            
            // Toggle internal parts visibility
            toggleInternalVisibility(internal);
        }
        
        function createWasteItem(type, position) {
            let geometry, material;
            
            if (type === 'bottle') {
                geometry = new THREE.CylinderGeometry(0.08, 0.1, 0.5, 32);
                material = new THREE.MeshStandardMaterial({ color: 0x38bdf8, metalness: 0.2, roughness: 0.5 });
            } else if (type === 'banana') {
                geometry = new THREE.TorusGeometry(0.22, 0.06, 24, 64, Math.PI * 1.2);
                material = new THREE.MeshStandardMaterial({ color: 0xfacc15, metalness: 0.2, roughness: 0.5 });
            } else if (type === 'can') {
                geometry = new THREE.CylinderGeometry(0.14, 0.14, 0.35, 32);
                material = new THREE.MeshStandardMaterial({ color: 0xe5e7eb, metalness: 0.9, roughness: 0.2 });
            } else {
                // Default to bottle for unknown items
                geometry = new THREE.CylinderGeometry(0.08, 0.1, 0.5, 32);
                material = new THREE.MeshStandardMaterial({ color: 0x94a3b8, metalness: 0.2, roughness: 0.5 });
            }
            
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.set(position[0], position[1], position[2]);
            mesh.castShadow = true;
            return mesh;
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            // Rotate the bin slowly
            bin.rotation.y += 0.005;
            
            // Animate the lid slightly
            lid.rotation.x = Math.sin(Date.now() * 0.002) * 0.03;
            
            // Animate conveyor belts
            conveyorBelts.forEach(belt => {
                belt.position.z += 0.01;
                if (belt.position.z > 0.2) belt.position.z = -0.2;
            });
            
            // Animate UV lights
            uvLights.forEach(light => {
                light.material.emissiveIntensity = 0.5 + Math.sin(Date.now() * 0.005) * 0.3;
            });
            
            // Animate flaps
            if (animationInProgress) {
                flaps[targetBin].rotation.x = Math.sin(Date.now() * 0.01) * 0.5;
            }
            
            controls.update();
            renderer.render(scene, camera);
        }
        
        function startScan(itemType, target) {
            if (animationInProgress) return;
            
            animationInProgress = true;
            targetBin = target;
            
            // Switch to internal view if not already
            if (!showInternalView) {
                toggleView(true);
            }
            
            // Show sensor animation
            const sensor = document.getElementById('sensor');
            sensor.classList.add('sensor-active');
            
            // Update prediction text
            const predictions = ['Recyclables', 'Organic', 'Metal/E‑waste', 'Landfill'];
            document.getElementById('prediction').textContent = predictions[target];
            
            // Remove any existing items
            items.forEach(item => scene.remove(item));
            items = [];
            
            // Create new item above the bin
            const item = createWasteItem(itemType, [0, 1.6, 0]);
            scene.add(item);
            items.push(item);
            
            // After scan animation, move the item to the target bin
            setTimeout(() => {
                sensor.classList.remove('sensor-active');
                moveItemToBin(item, target);
            }, 2000);
        }
        
        function moveItemToBin(item, targetBin) {
            const targets = [
                [-0.55, 0.6, 0.55],   // Recyclables
                [0.55, 0.6, 0.55],    // Organic
                [-0.55, 0.6, -0.55],  // Metal/E-waste
                [0.55, 0.6, -0.55]    // Landfill
            ];
            
            const target = targets[targetBin];
            const startPosition = [0, 1.6, 0];
            let progress = 0;
            
            function animateItem() {
                if (progress >= 1) {
                    animationInProgress = false;
                    // Reset flap position
                    flaps[targetBin].rotation.x = 0;
                    return;
                }
                
                progress += 0.02;
                
                // Simple easing function
                const e = progress < 0.5 
                    ? 2 * progress * progress 
                    : -1 + (4 - 2 * progress) * progress;
                
                // Calculate position
                const pos = [
                    startPosition[0] + (target[0] - startPosition[0]) * e,
                    startPosition[1] + (target[1] - startPosition[1]) * e - Math.sin(progress * Math.PI) * 0.2,
                    startPosition[2] + (target[2] - startPosition[2]) * e
                ];
                
                item.position.set(pos[0], pos[1], pos[2]);
                item.rotation.y += 0.02;
                
                // Open the flap when item is close
                if (progress > 0.6) {
                    flaps[targetBin].rotation.x = Math.PI / 4;
                }
                
                requestAnimationFrame(animateItem);
            }
            
            animateItem();
        }
        
        // Initialize the scene when the page loads
        window.addEventListener('load', init);
    </script>
</body>
</html>
